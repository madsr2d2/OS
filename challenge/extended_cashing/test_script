#!/bin/bash

# Function to display the correct usage of the script to the user.
usage() {
    echo "Usage: ./test_script <client_arg_number> <start> <stop> <number of steps> <server_port_1> [server_port_2]"
    exit 1
}

# Function to run the client program with the provided arguments.
run_client() {
    local port=$1
    local arg_value=$2
    # Construct the client arguments string.
    CLIENT_ARGS="localhost $port 1 10 1 1000 0 0 0"
    # Update the client argument based on the given value.
    CLIENT_ARGS=$(echo "$CLIENT_ARGS" | awk -v num="$ARG_NUMBER" -v value="$arg_value" '{$num=value; print}')
    # Execute the client program with the constructed arguments.
    ./client $CLIENT_ARGS | tail -n 1
}

# Function to calculate statistics (average and standard deviation) from the provided data.
calculate_stats() {
    local data=("$@")
    local length=${#data[@]}
    local sum=0
    local sumsq=0
    # Calculate the sum and sum of squares for the data.
    for val in "${data[@]}"; do
        sum=$(bc <<< "$sum + $val")
        sumsq=$(bc <<< "$sumsq + $val * $val")
    done
    # Calculate average and standard deviation.
    local avg=$(bc <<< "scale=2; $sum / $length")
    local variance=$(bc <<< "scale=2; ($sumsq - ($sum * $sum / $length)) / ($length - 1)")
    local sd=$(bc <<< "scale=2; sqrt($variance)")
    echo $avg $sd
}

# Validate if the correct number of arguments are provided.
if [ "$#" -lt 5 ]; then
    usage
fi

# Set global variables based on user-provided arguments.
ARG_NUMBER=$1
ARG_START=$2
ARG_STOP=$3
STEPS=$4
SERVER_PORT1=$5
SERVER_PORT2=$6
# Calculate the step increment based on the range and number of steps.
STEP=$(( ($ARG_STOP - $ARG_START) / ($STEPS - 1) ))

# Main loop to execute the runs and calculate statistics.
for (( i=0; i<$STEPS; i++ )); do
    ARG_VALUE=$(( ARG_START + i*STEP ))
    VAL1_1_RUNS=()
    VAL2_1_RUNS=()
    VAL1_2_RUNS=()
    VAL2_2_RUNS=()

    # Execute the client program multiple times to gather data.
    for (( run=1; run<=100; run++ )); do
        # Execute the client program for the first server.
        IFS=' ' read -ra RESULT1 <<< "$(run_client "$SERVER_PORT1" "$ARG_VALUE")"
        VAL1_1_RUNS+=("${RESULT1[1]}")
        VAL2_1_RUNS+=("${RESULT1[2]}")

        # If a second server port is provided, execute for that server as well.
        if [ ! -z "$SERVER_PORT2" ]; then
            IFS=' ' read -ra RESULT2 <<< "$(run_client "$SERVER_PORT2" "$ARG_VALUE")"
            VAL1_2_RUNS+=("${RESULT2[1]}")
            VAL2_2_RUNS+=("${RESULT2[2]}")
        fi
    done

    # Calculate statistics for the gathered data.
    IFS=' ' read -ra STATS1_1 <<< "$(calculate_stats "${VAL1_1_RUNS[@]}")"
    IFS=' ' read -ra STATS2_1 <<< "$(calculate_stats "${VAL2_1_RUNS[@]}")"

    # If there's data from the second server, calculate the differences in statistics.
    if [ ! -z "$SERVER_PORT2" ]; then
        IFS=' ' read -ra STATS1_2 <<< "$(calculate_stats "${VAL1_2_RUNS[@]}")"
        IFS=' ' read -ra STATS2_2 <<< "$(calculate_stats "${VAL2_2_RUNS[@]}")"

        # Calculate the average differences and combined standard deviations.
        AVG_DIFF1=$(bc <<< "${STATS1_1[0]} - ${STATS1_2[0]}")
        AVG_DIFF2=$(bc <<< "${STATS2_1[0]} - ${STATS2_2[0]}")
        SD_DIFF1=$(bc <<< "sqrt(${STATS1_1[1]}^2 + ${STATS1_2[1]}^2)")
        SD_DIFF2=$(bc <<< "sqrt(${STATS2_1[1]}^2 + ${STATS2_2[1]}^2)")

        # Print the results.
        echo -n "Run $((i+1)) (port $SERVER_PORT1 - port $SERVER_PORT2): $ARG_VALUE  Results: "
        printf "%.1f ± %.1f %.1f ± %.1f\n" $AVG_DIFF1 $SD_DIFF1 $AVG_DIFF2 $SD_DIFF2
    else
        # Print the results for a single server.
        echo -n "port $SERVER_PORT1, Run $((i+1)): $ARG_VALUE  Results: "
        printf "%.1f ± %.1f %.1f ± %.1f\n" "${STATS1_1[0]}" "${STATS1_1[1]}" "${STATS2_1[0]}" "${STATS2_1[1]}"
    fi
done
